on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.7.0
      - run: terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - run: terraform apply -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  docker:
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - run: |
          docker build -t owensweet/personal-site:latest .
          docker push owensweet/personal-site:latest

  deploy:
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - uses: actions/checkout@v3
      - uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ec2-user
          key: ${{ secrets.EC2_PEM }}
          port: 22
          source: "docker-compose.yml,Caddyfile"
          target: "/home/ec2-user/personal-site/"
          
      - uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ec2-user
          key: ${{ secrets.EC2_PEM }}
          port: 22
          script: |
            # Ensure Docker is running
            sudo systemctl start docker
            
            # Create project directory
            mkdir -p /home/ec2-user/personal-site
            cd /home/ec2-user/personal-site
            
            # Use newgrp to activate docker group membership in this session
            newgrp docker << 'DOCKER_COMMANDS'
            
            # Try Docker Compose V2 first (plugin), then fallback to V1
            if docker compose version &> /dev/null; then
              echo "Using Docker Compose V2"
              docker compose pull
              docker compose down --remove-orphans
              docker compose up -d
            elif command -v docker-compose &> /dev/null; then
              echo "Using Docker Compose V1"
              docker-compose pull
              docker-compose down --remove-orphans  
              docker-compose up -d
            else
              echo "Docker Compose not found, installing..."
              sudo curl -L "https://github.com/docker/compose/releases/download/v2.28.2/docker-compose-linux-x86_64" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
              docker-compose pull
              docker-compose up -d
            fi
            
            # Clean up
            docker system prune -f
            DOCKER_COMMANDS
